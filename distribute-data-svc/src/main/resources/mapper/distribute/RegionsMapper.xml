<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.haier.distribute.data.dao.distribute.RegionsDao">
    <resultMap id="BaseResultMap" type="com.haier.distribute.data.model.Regions">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="parentId" property="parentId" jdbcType="INTEGER"/>
        <result column="regionName" property="regionName" jdbcType="VARCHAR"/>
        <result column="parentPath" property="parentPath" jdbcType="VARCHAR"/>
        <result column="firstLetter" property="firstLetter" jdbcType="CHAR"/>
        <result column="regionType" property="regionType" jdbcType="BIT"/>
        <result column="shippingTime" property="shippingTime" jdbcType="VARCHAR"/>
        <result column="visible" property="visible" jdbcType="TINYINT"/>
        <result column="rowId" property="rowId" jdbcType="VARCHAR"/>
        <result column="testNum" property="testNum" jdbcType="TINYINT"/>
        <result column="standardRegionId" property="standardRegionId" jdbcType="INTEGER"/>
        <result column="code" property="code" jdbcType="VARCHAR"/>
        <result column="activeFlag" property="activeFlag" jdbcType="TINYINT"/>
        <result column="hasRead" property="hasRead" jdbcType="TINYINT"/>
        <result column="isSupportCod" property="isSupportCod" jdbcType="BIT"/>
        <result column="addTime" property="addTime" jdbcType="VARCHAR"/>
        <result column="modified" property="modified" jdbcType="TIMESTAMP"/>
        <result column="zipCode" property="zipCode" jdbcType="VARCHAR"/>
        <result column="receivingTime" property="receivingTime" jdbcType="INTEGER"/>
        <result column="shippingDistance" property="shippingDistance" jdbcType="VARCHAR"/>
        <result column="isOto" property="isOto" jdbcType="INTEGER"/>
    </resultMap>
     <resultMap id="PushAvailableResultMap" type="com.haier.distribute.data.model.Regions">
     	<result column="province" property="province" />
        <result column="code" property="code" />
        <result column="city" property="city" />
        <result column="region" property="region" />
        <result column="activeFlag" property="activeFlag" />
     </resultMap>
    <sql id="Base_Column_List">
    id, parentId, regionName, parentPath, firstLetter, regionType, shippingTime, visible, 
    rowId, testNum, standardRegionId, code, activeFlag, hasRead, isSupportCod, addTime, 
    modified, zipCode, receivingTime, shippingDistance, isOto
  </sql>
    <select id="get" parameterType="Integer" resultMap="BaseResultMap">
        select `id`,`parentId`,`regionName`,`parentPath`,`firstLetter`,`regionType`,`shippingTime`,`visible`,`rowId`,`testNum`,`standardRegionId`,`code`,`activeFlag`,`hasRead`,`isSupportCod`,`isOto`
        from `Regions`
        where `id` = #{id}
    </select>
    <select id="getRegionsAll" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from Regions where regionType &lt; 4
    </select>
    
        <select id="pushAvailable" resultMap="PushAvailableResultMap">
				SELECT
					r.`code`,
					r.regionName province,
					r1.regionName city,
					r2.regionName region,
					r.regionType,
					r.activeFlag
				FROM
					Regions r,
					Regions r1,
					Regions r2
				WHERE
					r.activeFlag = '1'
				AND r.id = r1.parentId
				AND r1.id = r2.parentId
				LIMIT 20
    </select>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from Regions
        where id = #{id,jdbcType=INTEGER}
    </select>
    <select id="selectByParentId" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from Regions
        where parentId = #{parentId,jdbcType=INTEGER} and regionType !=4
    </select>
    <!--根据id查询上级-->
    <select id="selectByParentPatchId" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from Regions
        where id = #{id,jdbcType=INTEGER}
    </select>

    <select id="selectPatchId"  resultType="java.lang.String">
    select 
    parentPath
    from Regions
    where id = #{id,jdbcType=INTEGER}
  </select>
    <select id="selectregionName" resultType="java.lang.String" >
    select 
    regionName
    from Regions
    where id = #{id,jdbcType=INTEGER}
  </select>
    <!-- 根据id查询省下的所有县 -->
    <select id="selectregionprovince" resultMap="BaseResultMap" >
  select t1.regionName as col01,
  t2.regionName as col02,
  t3.regionName as col03,
  t3.id
   from Regions 
   t1 INNER JOIN Regions t2 on t2.parentId = t1.id  
   INNER JOIN Regions t3 on t3.parentId = t2.id 
  where t1.id = #{id,jdbcType=INTEGER} and t1.regionType !='4'
  
  </select>
    <!-- 根据id查询市下的所有县 -->
    <select id="selectregioncity" resultMap="BaseResultMap" parameterType="java.lang.Integer">
 select 
 	t1.regionName as col01,
  	t2.regionName as col02,
    t2.id
    from Regions t1 
	INNER JOIN Regions t2 on t2.parentId = t1.id  
  	where t1.id = #{id,jdbcType=INTEGER} 
  	and 	
  	t1.regionType !='4'
  
  </select>

    <!-- 根据县 -->
    <select id="selectregioncounty" resultMap="BaseResultMap" parameterType="java.lang.Integer">
	select id ,regionName from Regions where id= #{id,jdbcType=INTEGER} 
  
  </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from Regions
    where id = #{id,jdbcType=INTEGER}
  </delete>
    <insert id="insert" parameterType="com.haier.distribute.data.model.Regions">
    insert into Regions (id, parentId, regionName, 
      parentPath, firstLetter, regionType, 
      shippingTime, visible, rowId, 
      testNum, standardRegionId, code, 
      activeFlag, hasRead, isSupportCod, 
      addTime, modified, zipCode, 
      receivingTime, shippingDistance, isOto
      )
    values (#{id,jdbcType=INTEGER}, #{parentId,jdbcType=INTEGER}, #{regionName,jdbcType=VARCHAR}, 
      #{parentPath,jdbcType=VARCHAR}, #{firstLetter,jdbcType=CHAR}, #{regionType,jdbcType=BIT}, 
      #{shippingTime,jdbcType=VARCHAR}, #{visible,jdbcType=TINYINT}, #{rowId,jdbcType=VARCHAR}, 
      #{testNum,jdbcType=TINYINT}, #{standardRegionId,jdbcType=INTEGER}, #{code,jdbcType=VARCHAR}, 
      #{activeFlag,jdbcType=TINYINT}, #{hasRead,jdbcType=TINYINT}, #{isSupportCod,jdbcType=BIT}, 
      #{addTime,jdbcType=VARCHAR}, #{modified,jdbcType=TIMESTAMP}, #{zipCode,jdbcType=VARCHAR}, 
      #{receivingTime,jdbcType=INTEGER}, #{shippingDistance,jdbcType=VARCHAR}, #{isOto,jdbcType=INTEGER}
      )
  </insert>
    <insert id="insertSelective" parameterType="com.haier.distribute.data.model.Regions">
        insert into Regions
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="parentId != null">
                parentId,
            </if>
            <if test="regionName != null">
                regionName,
            </if>
            <if test="parentPath != null">
                parentPath,
            </if>
            <if test="firstLetter != null">
                firstLetter,
            </if>
            <if test="regionType != null">
                regionType,
            </if>
            <if test="shippingTime != null">
                shippingTime,
            </if>
            <if test="visible != null">
                visible,
            </if>
            <if test="rowId != null">
                rowId,
            </if>
            <if test="testNum != null">
                testNum,
            </if>
            <if test="standardRegionId != null">
                standardRegionId,
            </if>
            <if test="code != null">
                code,
            </if>
            <if test="activeFlag != null">
                activeFlag,
            </if>
            <if test="hasRead != null">
                hasRead,
            </if>
            <if test="isSupportCod != null">
                isSupportCod,
            </if>
            <if test="addTime != null">
                addTime,
            </if>
            <if test="modified != null">
                modified,
            </if>
            <if test="zipCode != null">
                zipCode,
            </if>
            <if test="receivingTime != null">
                receivingTime,
            </if>
            <if test="shippingDistance != null">
                shippingDistance,
            </if>
            <if test="isOto != null">
                isOto,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="parentId != null">
                #{parentId,jdbcType=INTEGER},
            </if>
            <if test="regionName != null">
                #{regionName,jdbcType=VARCHAR},
            </if>
            <if test="parentPath != null">
                #{parentPath,jdbcType=VARCHAR},
            </if>
            <if test="firstLetter != null">
                #{firstLetter,jdbcType=CHAR},
            </if>
            <if test="regionType != null">
                #{regionType,jdbcType=BIT},
            </if>
            <if test="shippingTime != null">
                #{shippingTime,jdbcType=VARCHAR},
            </if>
            <if test="visible != null">
                #{visible,jdbcType=TINYINT},
            </if>
            <if test="rowId != null">
                #{rowId,jdbcType=VARCHAR},
            </if>
            <if test="testNum != null">
                #{testNum,jdbcType=TINYINT},
            </if>
            <if test="standardRegionId != null">
                #{standardRegionId,jdbcType=INTEGER},
            </if>
            <if test="code != null">
                #{code,jdbcType=VARCHAR},
            </if>
            <if test="activeFlag != null">
                #{activeFlag,jdbcType=TINYINT},
            </if>
            <if test="hasRead != null">
                #{hasRead,jdbcType=TINYINT},
            </if>
            <if test="isSupportCod != null">
                #{isSupportCod,jdbcType=BIT},
            </if>
            <if test="addTime != null">
                #{addTime,jdbcType=VARCHAR},
            </if>
            <if test="modified != null">
                #{modified,jdbcType=TIMESTAMP},
            </if>
            <if test="zipCode != null">
                #{zipCode,jdbcType=VARCHAR},
            </if>
            <if test="receivingTime != null">
                #{receivingTime,jdbcType=INTEGER},
            </if>
            <if test="shippingDistance != null">
                #{shippingDistance,jdbcType=VARCHAR},
            </if>
            <if test="isOto != null">
                #{isOto,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.haier.distribute.data.model.Regions">
        update Regions
        <set>
            <if test="parentId != null">
                parentId = #{parentId,jdbcType=INTEGER},
            </if>
            <if test="regionName != null">
                regionName = #{regionName,jdbcType=VARCHAR},
            </if>
            <if test="parentPath != null">
                parentPath = #{parentPath,jdbcType=VARCHAR},
            </if>
            <if test="firstLetter != null">
                firstLetter = #{firstLetter,jdbcType=CHAR},
            </if>
            <if test="regionType != null">
                regionType = #{regionType,jdbcType=BIT},
            </if>
            <if test="shippingTime != null">
                shippingTime = #{shippingTime,jdbcType=VARCHAR},
            </if>
            <if test="visible != null">
                visible = #{visible,jdbcType=TINYINT},
            </if>
            <if test="rowId != null">
                rowId = #{rowId,jdbcType=VARCHAR},
            </if>
            <if test="testNum != null">
                testNum = #{testNum,jdbcType=TINYINT},
            </if>
            <if test="standardRegionId != null">
                standardRegionId = #{standardRegionId,jdbcType=INTEGER},
            </if>
            <if test="code != null">
                code = #{code,jdbcType=VARCHAR},
            </if>
            <if test="activeFlag != null">
                activeFlag = #{activeFlag,jdbcType=TINYINT},
            </if>
            <if test="hasRead != null">
                hasRead = #{hasRead,jdbcType=TINYINT},
            </if>
            <if test="isSupportCod != null">
                isSupportCod = #{isSupportCod,jdbcType=BIT},
            </if>
            <if test="addTime != null">
                addTime = #{addTime,jdbcType=VARCHAR},
            </if>
            <if test="modified != null">
                modified = #{modified,jdbcType=TIMESTAMP},
            </if>
            <if test="zipCode != null">
                zipCode = #{zipCode,jdbcType=VARCHAR},
            </if>
            <if test="receivingTime != null">
                receivingTime = #{receivingTime,jdbcType=INTEGER},
            </if>
            <if test="shippingDistance != null">
                shippingDistance = #{shippingDistance,jdbcType=VARCHAR},
            </if>
            <if test="isOto != null">
                isOto = #{isOto,jdbcType=INTEGER},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.haier.distribute.data.model.Regions">
    update Regions
    set parentId = #{parentId,jdbcType=INTEGER},
      regionName = #{regionName,jdbcType=VARCHAR},
      parentPath = #{parentPath,jdbcType=VARCHAR},
      firstLetter = #{firstLetter,jdbcType=CHAR},
      regionType = #{regionType,jdbcType=BIT},
      shippingTime = #{shippingTime,jdbcType=VARCHAR},
      visible = #{visible,jdbcType=TINYINT},
      rowId = #{rowId,jdbcType=VARCHAR},
      testNum = #{testNum,jdbcType=TINYINT},
      standardRegionId = #{standardRegionId,jdbcType=INTEGER},
      code = #{code,jdbcType=VARCHAR},
      activeFlag = #{activeFlag,jdbcType=TINYINT},
      hasRead = #{hasRead,jdbcType=TINYINT},
      isSupportCod = #{isSupportCod,jdbcType=BIT},
      addTime = #{addTime,jdbcType=VARCHAR},
      modified = #{modified,jdbcType=TIMESTAMP},
      zipCode = #{zipCode,jdbcType=VARCHAR},
      receivingTime = #{receivingTime,jdbcType=INTEGER},
      shippingDistance = #{shippingDistance,jdbcType=VARCHAR},
      isOto = #{isOto,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
    <select id="getRegionType" resultType="Integer">
  select regionType from Regions where id = #{id}
  </select>

    <select id="getByIds" resultMap="BaseResultMap">
        select `id`,`parentId`,`regionName`,`parentPath`,`firstLetter`,`regionType`,`shippingTime`,`visible`,`rowId`,`testNum`,`standardRegionId`,`code`,`activeFlag`,`hasRead`,`isSupportCod`,`isOto`
        from `Regions`
        where `id` in (${ids})
    </select>

<select id="getRegions" parameterType="map" resultMap="BaseResultMap">
		select
		`id`,`parentId`,`regionName`,`parentPath`,`firstLetter`,`regionType`,`shippingTime`,`visible`,`rowId`,`testNum`,`standardRegionId`,`code`,`activeFlag`,`hasRead`,
		`isSupportCod`,`addTime`,`modified`,`zipCode`,`receivingTime` 
		from `Regions`
		where 1=1
		<if test="id != null">
        	AND `id` = #{id}
		</if>
		<if test="parentId != null">
        	AND parentId=#{parentId}
		</if>
		<if test="regionName != null and regionName !=''">
        	AND regionName=#{regionName}
		</if>
		</select>
</mapper>