<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.haier.shop.dao.shopread.ZfbOrdersDetailsMatchingReadDao" >
  <resultMap id="BaseResultMap" type="com.haier.shop.model.ZfbOrdersDetailsMatching" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="accounts_no" property="accountsNo" jdbcType="VARCHAR" />
    <result column="business_no" property="businessNo" jdbcType="VARCHAR" />
    <result column="orderSn" property="ordersn" jdbcType="VARCHAR" />
    <result column="product_name" property="productName" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="member_login_id" property="memberLoginId" jdbcType="VARCHAR" />
    <result column="income_money" property="incomeMoney" jdbcType="DECIMAL" />
    <result column="expenditure_money" property="expenditureMoney" jdbcType="DECIMAL" />
    <result column="account_balance" property="accountBalance" jdbcType="DECIMAL" />
    <result column="payment_code" property="paymentCode" jdbcType="VARCHAR" />
    <result column="payment_name" property="paymentName" jdbcType="VARCHAR" />
    <result column="business_type_code" property="businessTypeCode" jdbcType="VARCHAR" />
    <result column="business_type_name" property="businessTypeName" jdbcType="VARCHAR" />
    <result column="remake" property="remake" jdbcType="LONGVARCHAR" />
    <result column="taobao_business_type" property="taobaoBusinessType" jdbcType="VARCHAR" />
    <result column="source" property="source" jdbcType="VARCHAR" />
    <result column="orderAmount" property="orderamount" jdbcType="DECIMAL" />
    <result column="difference_status" property="differenceStatus" jdbcType="INTEGER" />
    <result column="o_id" property="oId" jdbcType="INTEGER" />
    <result column="bill_amount" property="billAmount" jdbcType="DECIMAL" />
  </resultMap>
  <resultMap id="DtoBaseResultMap" type="com.haier.shop.dto.ZfbOrderMatchingDto" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="accounts_no" property="accountsNo" jdbcType="VARCHAR" />
    <result column="business_no" property="businessNo" jdbcType="VARCHAR" />
    <result column="orderSn" property="ordersn" jdbcType="VARCHAR" />
    <result column="product_name" property="productName" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="member_login_id" property="memberLoginId" jdbcType="VARCHAR" />
    <result column="income_money" property="incomeMoney" jdbcType="DECIMAL" />
    <result column="expenditure_money" property="expenditureMoney" jdbcType="DECIMAL" />
    <result column="account_balance" property="accountBalance" jdbcType="DECIMAL" />
    <result column="payment_code" property="paymentCode" jdbcType="VARCHAR" />
    <result column="payment_name" property="paymentName" jdbcType="VARCHAR" />
    <result column="business_type_code" property="businessTypeCode" jdbcType="VARCHAR" />
    <result column="business_type_name" property="businessTypeName" jdbcType="VARCHAR" />
    <result column="remake" property="remake" jdbcType="LONGVARCHAR" />
    <result column="taobao_business_type" property="taobaoBusinessType" jdbcType="VARCHAR" />
    <result column="source" property="source" jdbcType="VARCHAR" />
    <result column="orderAmount" property="orderamount" jdbcType="DECIMAL" />
    <result column="difference_status" property="differenceStatus" jdbcType="INTEGER" />
    <result column="o_id" property="oId" jdbcType="INTEGER" />
    <result column="bill_amount" property="billAmount" jdbcType="DECIMAL" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, accounts_no, business_no, orderSn, product_name, create_time, member_login_id, 
    income_money, expenditure_money, account_balance, payment_code, payment_name, business_type_code, 
    business_type_name, remake, taobao_business_type, source, orderAmount, difference_status,o_id,bill_amount
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from zfb_orders_details_matching
    where id = #{id,jdbcType=BIGINT}
  </select>
  <select id="queryZfbOrderDetailPositive" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from zfb_orders_details_matching
    where business_type_code!="code3"  and o_id = #{orderId,jdbcType=INTEGER}
  </select>
  <select id="queryZfbOrderDetailNegative" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from zfb_orders_details_matching
    where business_type_code="code3"  and o_id = #{orderId,jdbcType=INTEGER}
  </select>
  <select id="getFindQueryOrderList" resultMap="DtoBaseResultMap" parameterType="com.haier.shop.model.QueryZFBOrderParameter" >
    select 
    <include refid="Base_Column_List" />
    from zfb_orders_details_matching
    where 1=1  
    	 <if test="orderSn  != null and orderSn !=''">
                and orderSn=#{orderSn}
         </if>
         <if test="source  != null and source !=''">
                and source=#{source}
         </if>
		<if test="differenceStatus  != null and differenceStatus !=''">
                and difference_status=#{differenceStatus}
         </if>

      <if test="memberLoginId  != null and memberLoginId !=''">
          and member_login_id  like  concat(concat('%',#{memberLoginId}),'%')
      </if>
      <if test="businessTypeCode  != null and businessTypeCode !=''">
          and business_type_code=#{businessTypeCode}
      </if>
      <if test="remake  != null and remake !=''">
          and remake like  concat(concat('%',#{remake}),'%')
      </if>

      <if test="incomeMoneymin != null and incomeMoneymin != ''">
          and income_money <![CDATA[ >= ]]> #{incomeMoneymin}
      </if>
      <if test="incomeMoneymax != null and incomeMoneymax != ''">
          and  income_money <![CDATA[  <= ]]> #{incomeMoneymax}
      </if>

      <if test="expenditureMoneymin != null and expenditureMoneymin != ''">
          and expenditure_money >= #{expenditureMoneymin}
      </if>
      <if test="expenditureMoneymax != null and expenditureMoneymax != ''">
          and  expenditure_money <![CDATA[  <= ]]>  #{expenditureMoneymax}
      </if>

         <if test="addTimeBegine != null and addTimeBegine != ''">
                and create_time >= unix_timestamp(#{addTimeBegine})
            </if>
            <if test="addTimeEnd != null and addTimeEnd != ''">
                and  create_time <![CDATA[  <= ]]>  unix_timestamp(#{addTimeEnd})
            </if>
         <if test="page  != null and rows  != null">
            Limit #{page} , #{rows}
         </if>
  </select>
  <select id="getFindQueryOrderListCount" resultType="Integer" parameterType="com.haier.shop.model.QueryZFBOrderParameter" >
    select 
    count(1)
    from zfb_orders_details_matching
    where 1=1	
    	<if test="orderSn  != null and orderSn !=''">
                and orderSn=#{orderSn}
         </if>

      <if test="memberLoginId  != null and memberLoginId !=''">
          and member_login_id  like  concat(concat('%',#{memberLoginId}),'%')
      </if>
      <if test="businessTypeCode  != null and businessTypeCode !=''">
          and business_type_code=#{businessTypeCode}
      </if>
      <if test="remake  != null and remake !=''">
          and remake like  concat(concat('%',#{remake}),'%')
      </if>

      <if test="incomeMoneymin != null and incomeMoneymin != ''">
          and income_money <![CDATA[ >= ]]> #{incomeMoneymin}
      </if>
      <if test="incomeMoneymax != null and incomeMoneymax != ''">
          and  income_money <![CDATA[  <= ]]> #{incomeMoneymax}
      </if>

      <if test="expenditureMoneymin != null and expenditureMoneymin != ''">
          and expenditure_money >= #{expenditureMoneymin}
      </if>
      <if test="expenditureMoneymax != null and expenditureMoneymax != ''">
          and  expenditure_money <![CDATA[  <= ]]>  #{expenditureMoneymax}
      </if>

         <if test="addTimeBegine != null and addTimeBegine != ''">
                and create_time >= unix_timestamp(#{addTimeBegine})
            </if>
            <if test="addTimeEnd != null and addTimeEnd != ''">
                and  create_time <![CDATA[  <= ]]>  unix_timestamp(#{addTimeEnd})
            </if>
         <if test="source  != null and source !=''">
                and source=#{source}
         </if>
         <if test="differenceStatus  != null and differenceStatus !=''">
                and difference_status=#{differenceStatus}
         </if>
  </select>
</mapper>