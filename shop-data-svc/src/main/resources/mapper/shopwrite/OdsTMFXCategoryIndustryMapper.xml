<?xml version="1.0" encoding="UTF-8" ?>
<!--
  ~ Code generated by CodeGen
  -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="com.haier.shop.dao.settleCenter.OdsTMFXCategoryIndustryDao">
    <resultMap id="BaseResultMap" type="com.haier.shop.model.OdsTMFXCategoryIndustry">
        <id column="id" property="id"/>
        <result column="brand" property="brand"/>
        <result column="category" property="category"/>
        <result column="industry" property="industry"/>
        <result column="create_time" property="createTime"/>
        
    </resultMap>

    <sql id="tb">
        ods_tmfx_category_industry
    </sql>

    <sql id="cols_all">
        id, <include refid="cols_exclude_id" />
    </sql>

    <sql id="cols_exclude_id">
        brand, 
        category, 
        industry, 
        create_time
        
    </sql>

    <sql id="vals">
        #{id},
        #{brand}, 
        #{category}, 
        #{industry}, 
        #{createTime}
        
    </sql>

    <sql id="criteria">
        <if test="id != null">AND id = #{id}</if>
        <if test="brand != null">AND brand = #{brand}</if>
        <if test="category != null">AND category = #{category}</if>
        <if test="industry != null">AND industry = #{industry}</if>
        <if test="createTime != null">AND create_time = #{createTime}</if>
        
    </sql>

    <insert id="create" parameterType="com.haier.shop.model.OdsTMFXCategoryIndustry">
        INSERT INTO <include refid="tb" />
        (<include refid="cols_all" />)
        VALUES
        (<include refid="vals" />)
    </insert>

    <insert id="creates" parameterType="list">
        INSERT INTO <include refid="tb" />
        (<include refid="cols_all" />)
        VALUES
        <foreach collection="list" separator="," item="item">
            (
            #{item.id},
            #{item.brand}, 
            #{item.category}, 
            #{item.industry}, 
            #{item.createTime}
            
            )
        </foreach>
    </insert>

    <select id="load" resultMap="BaseResultMap" >
        SELECT <include refid="cols_all" /> FROM <include refid="tb" />
        WHERE id = #{id}
    </select>

    <update id="update" parameterType="com.haier.shop.model.OdsTMFXCategoryIndustry">
        UPDATE <include refid="tb"/>
        <set>
            <if test="brand != null">brand = #{brand},</if>
            <if test="category != null">category = #{category},</if>
            <if test="industry != null">industry = #{industry},</if>

            create_time=now()
        </set>
        WHERE id = #{id}
    </update>

    <delete id="delete" >
        DELETE FROM <include refid="tb"/>
        WHERE id = #{id}
    </delete>

    <delete id="deletes" parameterType="list">
        DELETE FROM <include refid="tb"/>
        WHERE id IN
        <foreach collection="list" open="(" separator="," close=")" item="id">
            #{id}
        </foreach>
    </delete>

    <select id="list" parameterType="com.haier.shop.model.OdsTMFXCategoryIndustry" resultMap="BaseResultMap">
        SELECT <include refid="cols_all"/> FROM <include refid="tb"/>
        <where>
            <include refid="criteria"/>
        </where>
    </select>

    <sql id="pagingSql" >
        <![CDATA[
        FROM <include refid="tb"/>

        ]]>
        <where>
            <include refid="criteria"/>
        </where>
    </sql>
    <select id="count" parameterType="map" resultType="long">
        SELECT count(1)
        <include refid="pagingSql" />
    </select>

    <select id="paging" parameterType="map" resultType="map">
        SELECT *
        <include refid="pagingSql"/>
        ORDER BY
        id DESC
        LIMIT #{limit} OFFSET ${offset}
    </select>

</mapper>