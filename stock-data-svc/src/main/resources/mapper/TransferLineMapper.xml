<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.haier.stock.dao.stock.TransferLineDao">
	<resultMap id="InvTransferLineResult" type="com.haier.stock.model.InvTransferLine">
		<result property="lineId" column="line_id" />
		<result property="lineNum" column="line_num" />
		<result property="transferReason" column="transfer_reason" />
		<result property="soLineNum" column="so_line_num" />
		<result property="channelFrom" column="channel_from" />
		<result property="channelTo" column="channel_to" />
		<result property="reqDep" column="req_dep" />
		<result property="lineStatus" column="line_status" />
		<result property="itemId" column="item_id" />
		<result property="itemCode" column="item_code" />
		<result property="itemName" column="item_name" />
		<result property="secFrom" column="sec_from" />
		<result property="secTo" column="sec_to" />
		<result property="transferQty" column="transfer_qty" />
		<result property="qty" column="qty"/>
		<result property="transferFee" column="transfer_fee" />
		<result property="transferFeeUser" column="transfer_fee_user" />
		<result property="transferFeeTime" column="transfer_fee_time" />
		<result property="approveStatus" column="approve_status" />
		<result property="approveTime" column="approve_time" />
		<result property="approveUser" column="approve_user" />
		<result property="approveRemark" column="approve_remark" />
		<result property="lesNum" column="les_num" />
		<result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
		<result property="createUser" column="create_user" />
		<result property="haulCycle" column="haul_cycle"/>
		<result property="remark" column="remark" />
		<result property="freeTransfer" column="freeTransfer" />
		<result property="salesAmount" column="sales_amounts" />

	</resultMap>
	<select id="get" parameterType="Integer" resultMap="InvTransferLineResult">
		select `line_id`,`line_num`,`transfer_reason`,`so_line_num`,`channel_from`,`channel_to`,`req_dep`,`line_status`,`item_id`,`item_code`,`item_name`,`sec_from`,`sec_to`,`transfer_qty`,`transfer_fee`,`transfer_fee_user`,`transfer_fee_time`,`approve_status`,`approve_time`,`approve_user`,`approve_remark`,`les_num`,`create_time`,`create_user`,`haul_cycle`,`remark`,`freeTransfer`
		from `inv_transfer_line`
		where `line_id` = #{lineId}
	</select>
	<select id="getInvTransferLineByLineNum" parameterType="String" resultMap="InvTransferLineResult">
		select `line_id`,`line_num`,`transfer_reason`,`so_line_num`,`channel_from`,`channel_to`,`req_dep`,`line_status`,`item_id`,`item_code`,`item_name`,`sec_from`,`sec_to`,`transfer_qty`,`transfer_fee`,`transfer_fee_user`,`transfer_fee_time`,`approve_status`,`approve_time`,`approve_user`,`approve_remark`,`les_num`,`create_time`,`create_user`,`haul_cycle`,`remark`,`freeTransfer`
		from `inv_transfer_line`
		where `line_num` = #{param1}
	</select>
	<select id="getInvTransferLineBySoLineNum" parameterType="String" resultMap="InvTransferLineResult">
		select `line_id`,`line_num`,`transfer_reason`,`so_line_num`,`channel_from`,`channel_to`,`req_dep`,`line_status`,`item_id`,`item_code`,`item_name`,`sec_from`,`sec_to`,`transfer_qty`,`transfer_fee`,`transfer_fee_user`,`transfer_fee_time`,`approve_status`,`approve_time`,`approve_user`,`approve_remark`,`les_num`,`create_time`,`create_user`,`haul_cycle`,`remark`,`freeTransfer`,`sales_amounts`,`qty`
		from `inv_transfer_line`
		where `so_line_num` = #{soLineNum} and line_status not in (-1,110,310)
		limit 1
	</select>
	<select id="getYpInvTransferLineBySoLineNum" parameterType="String" resultMap="InvTransferLineResult">
		select `line_id`,`line_num`,`transfer_reason`,`so_line_num`,`channel_from`,`channel_to`,`req_dep`,`line_status`,`item_id`,`item_code`,`item_name`,`sec_from`,`sec_to`,`transfer_qty`,`transfer_fee`,`transfer_fee_user`,`transfer_fee_time`,`approve_status`,`approve_time`,`approve_user`,`approve_remark`,`les_num`,`create_time`,`create_user`,`haul_cycle`,`remark`,`freeTransfer`,`sales_amounts`,`qty`
		from `inv_transfer_line`
		where `so_line_num` = #{soLineNum} and line_status not in (-1,110,310) and transfer_reason= 5
		limit 1
	</select>
	<insert id="insert" parameterType="com.haier.stock.model.InvTransferLine" useGeneratedKeys="true" keyProperty="lineId" keyColumn="line_id">
		insert into `inv_transfer_line`(`line_num`,`transfer_reason`,`so_line_num`, `channel_from`, `channel_to`, `req_dep`,`line_status`,`item_id`,`item_code`,`item_name`,`sec_from`,`sec_to`,`transfer_qty`,`qty`,`transfer_fee`,`transfer_fee_user`,`transfer_fee_time`,`approve_status`,`approve_time`,`approve_user`,`approve_remark`,`les_num`,`create_time`,`create_user`,`haul_cycle`,`remark`,`freeTransfer`,`sales_amounts`)
		values(#{lineNum},#{transferReason}
		<choose>  
             <when test="soLineNum == null">,''</when>
             <when test="soLineNum != null">,#{soLineNum}</when>
		</choose>
		, #{channelFrom},#{channelTo}
		<choose>
			<when test="reqDep == null">,''</when>
			<when test="reqDep != null">,#{reqDep}</when>
		</choose>
		,#{lineStatus}
		<choose>
			<when test="itemId == null">,0</when>
			<when test="itemId != null">,#{itemId}</when>
		</choose>
		,#{itemCode},#{itemName},#{secFrom},#{secTo},#{transferQty},#{qty}
		<choose>
			<when test="transferFee == null">,'0.00'</when>
			<when test="transferFee != null">,#{transferFee}</when>
		</choose>
		<choose>
			<when test="transferFeeUser == null">,''</when>
			<when test="transferFeeUser != null">,#{transferFeeUser}</when>
		</choose>
		,#{transferFeeTime}
		<choose>
			<when test="approveStatus == null">,''</when>
			<when test="approveStatus != null">,#{approveStatus}</when>
		</choose>
		,#{approveTime}
		<choose>
			<when test="approveUser == null">,''</when>
			<when test="approveUser != null">,#{approveUser}</when>
		</choose>
		<choose>
			<when test="approveRemark == null">,''</when>
			<when test="approveRemark != null">,#{approveRemark}</when>
		</choose>
		<choose>
			<when test="lesNum == null">,''</when>
			<when test="lesNum != null">,#{lesNum}</when>
		</choose>
		,now(),#{createUser}
		<choose>
			<when test="haulCycle == null">,0</when>
			<when test="haulCycle != null">,#{haulCycle}</when>
		</choose>
		 ,#{remark},#{freeTransfer},#{salesAmount})
	</insert>
	<update id="update" parameterType="com.haier.stock.model.InvTransferLine">
		update `inv_transfer_line` set `line_num`=#{lineNum},`transfer_reason`=#{transferReason},`so_line_num`=#{soLineNum},`req_dep`=#{reqDep},`line_status`=#{lineStatus},`item_id`=#{itemId},`item_code`=#{itemCode},`item_name`=#{itemName},`sec_from`=#{secFrom},`sec_to`=#{secTo},`transfer_qty`=#{transferQty},`transfer_fee`=#{transferFee},`transfer_fee_user`=#{transferFeeUser},`transfer_fee_time`=#{transferFeeTime},`approve_status`=#{approveStatus},`approve_time`=#{approveTime},`approve_user`=#{approveUser},`approve_remark`=#{approveRemark},`les_num`=#{lesNum},`create_time`=#{createTime},`create_user`=#{createUser},`haul_cycle`=#{haulCycle},`remark`=#{remark}
		where `line_id` = #{lineId}
	</update>
	<select id="getTransferLines" parameterType="java.util.Map" resultMap="InvTransferLineResult">
		select `line_id`,`line_num`,`transfer_reason`,`so_line_num`,`channel_to`, `channel_from`,`req_dep`,`line_status`,`item_id`,`item_code`,`item_name`,`sec_from`,`sec_to`,`transfer_qty`,`qty`,`transfer_fee`,`transfer_fee_user`,`transfer_fee_time`,`approve_status`,`approve_time`,`approve_user`,`approve_remark`,`les_num`,`create_time`,`create_user`,`haul_cycle`,`remark`,`freeTransfer`,`sales_amounts`
		from `inv_transfer_line`
		<where>
			<if test="lineNum != null">
				and line_num in
				<foreach collection="lineNum" index="index" item="item" open="("
					separator="," close=")">
					#{item}
				</foreach>
			</if>
			<if test="lbx != null">
				and so_line_num in
				<foreach collection="lbx" index="index" item="item" open="("
					separator="," close=")">
					#{item}
				</foreach>
			</if>
			<if test="startTime != null ">
				<![CDATA[and create_time >= #{startTime}]]>
			</if>
			<if test="endTime != null">
				<![CDATA[and create_time <= #{endTime}]]>
			</if>
			<if test="channelTo != null and channelTo !='ALL'">
				and channel_to = #{channelTo}
			</if>
			<if test="channelFrom != null and channelFrom !='ALL'">
				and channel_from = #{channelFrom}
			</if>
			<if test="reqDep != null and reqDep !=''">
				and req_dep = #{reqDep}
			</if>
			<if test="transferReason != null and transferReason !=''">
				and transfer_reason = #{transferReason}
			</if>
			<if test="itemCode != null and itemCode !=''">
				and item_code like CONCAT(#{itemCode},'%')
			</if>
			<if test="secFrom != null and secFrom !=''">
				and sec_from like CONCAT(#{secFrom},'%')
			</if>
			<if test="secTo != null and secTo !=''">
				and sec_to like CONCAT(#{secTo},'%')
			</if>
			<if test="lineStatus != null">
				and line_status in
				<foreach collection="lineStatus" index="index" item="item" open="("
					separator="," close=")">
					#{item}
				</foreach>
			</if>
		</where>
		order by create_time desc
		<if test="size != null and size &gt; 0">
			limit #{start},#{size}
		</if>
	</select>
	
	<select id="getCount" parameterType="java.util.Map" resultType="Integer">
		select count(1) from inv_transfer_line
		<where>
			<if test="lineNum != null">
				and line_num in
				<foreach collection="lineNum" index="index" item="item" open="("
					separator="," close=")">
					#{item}
				</foreach>
			</if>
			<if test="lbx != null">
				and so_line_num in
				<foreach collection="lbx" index="index" item="item" open="("
					separator="," close=")">
					#{item}
				</foreach>
			</if>
			<if test="startTime != null">
				<![CDATA[and create_time >= #{startTime}]]>
			</if>
			<if test="endTime != null">
				<![CDATA[and create_time <= #{endTime}]]>
			</if>
			<if test="channelFrom != null and channelFrom !='ALL'">
				and channel_from = #{channelFrom}
			</if>
			<if test="channelTo != null and channelTo !='ALL'">
				and channel_to = #{channelTo}
			</if>
			<if test="reqDep != null and reqDep !=''">
				and req_dep = #{reqDep}
			</if>
			<if test="transferReason != null">
				and transfer_reason = #{transferReason}
			</if>
			<if test="itemCode != null and itemCode !=''">
				and item_code like CONCAT(#{itemCode},'%')
			</if>
			<if test="secFrom != null and secFrom !=''">
				and sec_from like CONCAT(#{secFrom},'%')
			</if>
			<if test="secTo != null and secTo !=''">
				and sec_to like CONCAT(#{secTo},'%')
			</if>
			<if test="lineStatus != null">
				and line_status in
				<foreach collection="lineStatus" index="index" item="item" open="("
					separator="," close=")">
					#{item}
				</foreach>
			</if>
		</where>
	</select>
	<select id="getByLineIds"  resultMap="InvTransferLineResult">
		select `line_id`,`line_num`,`transfer_reason`,`so_line_num`,`channel_from`,`channel_to`,`req_dep`,`line_status`,`item_id`,`item_code`,`item_name`,`sec_from`,`sec_to`,`transfer_qty`,`qty`,`transfer_fee`,`transfer_fee_user`,`transfer_fee_time`,`approve_status`,`approve_time`,`approve_user`,`approve_remark`,`les_num`,`create_time`,`create_user`,`haul_cycle`,`remark`,`freeTransfer`
		from `inv_transfer_line`
		where `line_id` in
		<foreach collection="array" index="index" item="item" open="("
			separator="," close=")">
			#{item}
		</foreach>
	</select>
	<select id="getInTransferInfoFromCaiNiao"  resultMap="InvTransferLineResult">
		select `line_id`,`line_num`,`transfer_reason`,`so_line_num`,`channel_from`,`channel_to`,`req_dep`,`line_status`,`item_id`,`item_code`,`item_name`,`sec_from`,`sec_to`,`transfer_qty`,`qty`,`transfer_fee`,`transfer_fee_user`,`transfer_fee_time`,`approve_status`,`approve_time`,`approve_user`,`approve_remark`,`les_num`,`create_time`,`create_user`,`haul_cycle`,`remark`,`freeTransfer`
		from `inv_transfer_line`
		where `transfer_reason`=4 and `line_status`=50 limit 1000
	</select>
	<update id="updateLineStatusByLineIds" parameterType="java.util.Map">
		update `inv_transfer_line` set `line_status`=#{status}
		where `line_id` in
		<foreach collection="lineIdArr" index="index" item="item" open="("
			separator="," close=")">
			#{item}
		</foreach>
	</update>
	<select id="getPPTransferLineNum" parameterType="String" resultMap="InvTransferLineResult">
		select `line_num` 
		from `inv_transfer_line`
		where `line_num` like CONCAT(#{param},'%') order by `line_id` desc
	</select>
	<select id="getTransferLineByLineStatus" parameterType="Integer" resultMap="InvTransferLineResult">
		select `line_id`,`line_num`,`transfer_reason`,`so_line_num`,`channel_from`, `channel_to`,`req_dep`,`line_status`,`item_id`,`item_code`,`item_name`,`sec_from`,`sec_to`,`transfer_qty`,`transfer_fee`,`transfer_fee_user`,`transfer_fee_time`,`approve_status`,`approve_time`,`approve_user`,`approve_remark`,`les_num`,`create_time`,`create_user`,`haul_cycle`,`remark`,`freeTransfer`
		from `inv_transfer_line`
		where `line_status` = #{param1} limit 1000
	</select>
	<select id="getTransferLine3WByStatusReason" parameterType="Integer" resultMap="InvTransferLineResult">
		select `line_id`,`line_num`,`transfer_reason`,`so_line_num`,`channel_from`, `channel_to`,`req_dep`,`line_status`,`item_id`,`item_code`,`item_name`,`sec_from`,`sec_to`,`transfer_qty`,`transfer_fee`,`transfer_fee_user`,`transfer_fee_time`,`approve_status`,`approve_time`,`approve_user`,`approve_remark`,`les_num`,`create_time`,`create_user`,`haul_cycle`,`remark`,`freeTransfer`
		from `inv_transfer_line`
		where `line_status` = #{param1} and (`transfer_reason`=4 or `transfer_reason`=5) limit 1000
	</select>
	
	<update id="updateLineTransferQtyByLineId" parameterType="java.util.Map">
		update 
			`inv_transfer_line` 
		set 
			`transfer_qty`=#{transfer_qty},
			`remark`=#{remark}
		where `line_id` =#{line_id}
	</update>
	
	<update id="updateRemarkByLineId" parameterType="java.util.Map">
		update
			`inv_transfer_line`
		set
			`remark`=#{remark}
		where `line_id` =#{id}
	</update>

	<update id="updateRemarkByLineNum" parameterType="java.util.Map">
		update
		`inv_transfer_line`
		set
		`remark`=#{remark}
		where `line_num` =#{lineNum}
	</update>

	<update id="updateLineStatusByLineNum" parameterType="java.util.Map">
		update 
			`inv_transfer_line` 
		set 
			`line_status`=#{lineStatus}
		<if test="qty != null">
			,qty = #{qty}
		</if>
		where `line_num` =#{lineNum}
	</update>
	
</mapper>