<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.haier.stock.dao.stock.InvBaseStoreDao">
	<resultMap id="invBaseStoreResult" type="com.haier.stock.model.InvBaseStore">
		<result property="id" column="id" />
		<result property="sku" column="sku" />
		<result property="itemProperty" column="item_property" />
		<result property="storeCode" column="store_code" />
		<result property="stockQty" column="stock_qty" />
		<result property="frozenQty" column="frozen_qty" />
		<result property="storeTs" column="store_ts" />
		<result property="createTime" column="create_time" />
		<result property="updateTime" column="update_time" />
	</resultMap>
	<select id="getByItemPropertyForUpdate" resultMap="invBaseStoreResult">
		select
		`id`,`sku`,`item_property`,`store_code`,`stock_qty`,`frozen_qty`,`store_ts`,`create_time`,`update_time`
		from `inv_base_store`
		where `sku` = #{sku} and `store_code` = #{storeCode} and `item_property`=#{itemProperty}  FOR UPDATE
	</select>
	<select id="getByItemProperty" resultMap="invBaseStoreResult">
		select
		`id`,`sku`,`item_property`,`store_code`,`stock_qty`,`frozen_qty`,`store_ts`,`create_time`,`update_time`
		from `inv_base_store`
		where `sku` = #{sku} and `store_code` = #{code} and `item_property`=#{itemProperty}
	</select>
	<update id="updateStockQty">
		update `inv_base_store` set `update_time`=  now(), `store_ts`=#{storeTs} ,`stock_qty` = ${qty} where `id` = ${id} 
	</update>
	<select id="get" parameterType="Integer" resultMap="invBaseStoreResult">
		select `id`,`sku`,`item_property`,`store_code`,`stock_qty`,`frozen_qty`,`store_ts`,`create_time`,`update_time`
		from `inv_base_store`
		where `sku`=#{sku} and `store_code`=#{storeCode} 
	</select>
	<insert id="insert" parameterType="com.haier.stock.model.InvBaseStore">
		insert into `inv_base_store`(`sku`,`item_property`,`store_code`,`stock_qty`,`frozen_qty`,`store_ts`,`create_time`,`update_time`)
		values(#{sku},#{itemProperty},#{storeCode},#{stockQty},#{frozenQty},#{storeTs},#{createTime},#{updateTime})
	</insert>
	
	<update id="update" parameterType="com.haier.stock.model.InvBaseStore">
		update `inv_base_store` set `sku`=#{sku},`item_property`=#{itemProperty},`store_code`=#{storeCode},`stock_qty`=#{stockQty},`frozen_qty`=#{frozenQty},`store_ts`=#{storeTs},`create_time`=#{createTime},`update_time`=#{updateTime}
		where `id` = #{id}
	</update>
	<select id="getStore" resultMap="invBaseStoreResult">
		select `id`,`sku`,`item_property`,`store_code`,`stock_qty`,`frozen_qty`,`store_ts`,`create_time`,`update_time`
		from `inv_base_store`
		where `sku` = #{sku} 
		and `store_code` = #{storeCode}
		and `item_property`=#{itemProperty}
	</select>
	<update id="releaseFrozenQty">
		<![CDATA[
		update inv_base_store set
		update_time =  now(),
		frozen_qty = frozen_qty - ${releaseQty}
		where `id` = ${id} and convert(frozen_qty,SIGNED) - ${releaseQty} >= 0
		]]>
	</update>
	<update id="releaseStockQtyAndFrozenQty">
		<![CDATA[
		update inv_base_store set
		update_time =  now(),
		stock_qty = stock_qty - ${releaseQty},
		frozen_qty = frozen_qty - ${releaseQty}
		where `id` = ${id} and convert(frozen_qty,SIGNED) - ${releaseQty} >= 0 and convert(stock_qty,SIGNED) - ${releaseQty} >= 0 
		]]>
	</update>
	<update id="updateQtyForFrozen">
		<![CDATA[
			update `inv_base_store` set 
			`frozen_qty` = ${frozenQty},
			`update_time`=  #{updateTime} ,
			`stock_qty` =${stockQty} 
			where `id` = ${id} and stock_qty >=${frozenQty}
		]]>
	</update>
</mapper>