<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.haier.eis.dao.eis.LesStockItemDao">
	<resultMap id="lesStockItemResult" type="com.haier.eis.model.LesStockItem">
		<result property="id" column="id" />
		<result property="lesStockSyncsId" column="les_stock_syncs_id" />
		<result property="sCode" column="scode" />
		<result property="sku" column="sku" />
		<result property="externalSku" column="sku" />
		<result property="stock" column="stock" />
		<result property="type" column="type" />
		<result property="eaitime" column="eai_time" />
		<result property="data" column="data" />
		<result property="status" column="status" />
		<result property="processTime" column="process_time" />
		<result property="addTime" column="add_time" />
		<result property="errorMessage" column="error_message" />
		<result property="versionCode" column="version_code" />
		<result column="channel_code" property="channelCode" />
	</resultMap>
	<select id="getNotProcessMinLssId" resultMap="lesStockItemResult">
		select min(`les_stock_syncs_id`) lesStockSyncsId
		from les_stock_item
		where
		status = 0
	</select>
	<select id="getNotConvertedLssId" resultMap="lesStockItemResult">
		select `les_stock_syncs_id` lesStockSyncsId
		from les_stock_item
		where
		status = 10
		group by `les_stock_syncs_id`
	</select>
	<select id="getNotConvertedByLssId" parameterType="Integer"
		resultMap="lesStockItemResult">
		select
		`id`,`sku`
		from les_stock_item
		where status = 10 and `les_stock_syncs_id` =
		#{lesStockSyncsId}
		order by sku
	</select>
	<select id="getNotProcessLssIds" resultType="Integer">
		select DISTINCT `les_stock_syncs_id`
		from les_stock_item
		where status = 0 or status = 10
	</select>
	<select id="getNewerItemCount" parameterType="Map" resultType="Integer">
		SELECT count(1) 
		FROM `les_stock_item` 
		where `status`=0
		and `sku`=#{sku} 
		and `scode`=#{scode}
		and `les_stock_syncs_id`>#{batchId};
	</select>
	<select id="getNotProcessListByLssId" parameterType="Integer"
		resultMap="lesStockItemResult">
		select
		`id`,`les_stock_syncs_id`,`sCode`,`sku`,`stock`,`type`,`eai_time`,`data`,`status`,`process_time`,`add_time`,`error_message`,`version_code`,`channel_code`
		from les_stock_item
		where status = 0 and `les_stock_syncs_id` =
		#{lesStockSyncsId}
	</select>
	<insert id="insertItem" parameterType="com.haier.eis.model.LesStockItem">
		insert into
		`les_stock_item`(`les_stock_syncs_id`,`scode`,`sku`,`stock`,`type`,`eai_time`,`data`,`status`,`process_time`,`add_time`,`error_message`,`version_code`,`channel_code`)
		values(#{lesStockSyncsId},#{sCode},#{sku},#{stock},#{type},#{eaitime},#{data},#{status},#{processTime},#{addTime},#{errorMessage},#{versionCode},#{channelCode})
	</insert>
	<insert id="batchInsertItem" parameterType="java.util.List">
		insert into
		`les_stock_item`(`les_stock_syncs_id`,`scode`,`sku`,`stock`,`type`,`eai_time`,`data`,`status`,`process_time`,`add_time`,`error_message`,`version_code`,`channel_code`)
		values
		<foreach collection="stockItems" item="item" index="index" separator=",">
		(#{item.lesStockSyncsId},#{item.sCode},#{item.sku},#{item.stock},#{item.type},#{item.eaitime},#{item.data},#{item.status},
		#{item.processTime},#{item.addTime},#{item.errorMessage},#{item.versionCode},#{item.channelCode})
		</foreach>
	</insert>
	<!-- <update id="batchUpdateAfterProcessed" parameterType="map"> <![CDATA[ 
		update `les_stock_item` set `status` = 1,`process_time` = unix_timestamp(),`error_message` 
		= #{errorMessage} where `status` = 0 and `sCode` = #{sCode} and `sku` = #{sku} 
		and `eai_time` <= #{eaitime} ]]> </update> -->
	<update id="updateAfterProcessed" parameterType="map">
		<![CDATA[
		update `les_stock_item` set `status` = #{status},`process_time` = unix_timestamp(),`error_message` = #{errorMessage}
		where `id` = #{id} and `status` = 0
		]]>
	</update>
	<update id="updateAfterConverted" parameterType="map">
		<![CDATA[
		update `les_stock_item` set `status` = #{status},`sku`=#{sku},`process_time` = unix_timestamp(),`error_message` = #{errorMessage}
		where id = #{id}
		]]>
	</update>
</mapper>